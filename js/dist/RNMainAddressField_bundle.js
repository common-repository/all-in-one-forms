rndefine("#RNMainAddressField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","#RNMainFormBuilderCore/FieldWithPrice.Model","lit","lit/decorators","#RNMainFormBuilderCore/FieldBase","#RNMainFormBuilderCore/IconDirective","#RNMainFormBuilderCore/FieldWithPrice","lit-html/directives/live.js","#RNMainLit/Lit","lit/directives/repeat.js","#RNMainCore/StoreBase","#RNMainFormBuilderCore/FieldWithPrice.Options","#RNMainFormBuilderCore/FormBuilder.Options"],(function(e,t,i,s,a,n,r,l,o,d,h,u,p,c){"use strict";class m extends i.FieldWithPriceModel{constructor(e,t){super(e,t),this.CountryList=["Afghanistan","Aland Islands","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Ascension Island","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","British Virgin Islands","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Canary Islands","Cape Verde","Caribbean Netherlands","Cayman Islands","Central African Republic","Ceuta and Melilla","Chad","Chile","China","Christmas Island","Clipperton Island","Cocos (Keeling) Islands","Colombia","Comoros","Congo (DRC)","Congo (Republic)","Cook Islands","Costa Rica","Côte d’Ivoire","Croatia","Cuba","Curaçao","Cyprus","Czech Republic","Denmark (Danmark)","Diego Garcia","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard &amp; McDonald Islands","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia (FYROM)","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","Northern Mariana Islands","North Korea","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn Islands","Poland","Portugal","Puerto Rico","Qatar","Réunion","Romania","Russia","Rwanda","Saint Barthélemy","Saint Helena","Saint Kitts and Nevis","Saint Lucia","Saint Martin","Saint Pierre and Miquelon","Samoa","San Marino","São Tomé and Príncipe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Sint Maarten","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia &amp; South Sandwich Islands","South Korea","South Sudan","Spain","Sri Lanka","St. Vincent &amp; Grenadines","Sudan","Suriname","Svalbard and Jan Mayen","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tristan da Cunha","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands","Tuvalu","U.S. Outlying Islands","U.S. Virgin Islands","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States","Uruguay","Uzbekistan","Vanuatu","Vatican City","Venezuela","Vietnam","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe"],this.IsFocused=!1,this.Address1="",this.Address2="",this.City="",this.State="",this.ZipCode=""}InternalSerialize(e){super.InternalSerialize(e),e.Value=this.GetValue()}GetStoresInformation(){return!0}GetIsUsed(){return!(!super.GetIsUsed()||null==this.GetValue())}InternalToText(){if(!this.GetIsUsed())return"";let e=[];return""!=this.GetAddress1()&&e.push(this.GetAddress1()),""!=this.GetAddress2()&&e.push(this.GetAddress2()),""!=this.GetCity()&&e.push(this.GetCity()),""!=this.GetState()&&e.push(this.GetState()),""!=this.GetZip()&&e.push(this.GetZip()),""!=this.GetCountry()&&e.push(this.GetCountry()),e.join("\n ")}GetValue(){return this.GetIsVisible()?""==this.GetAddress1()||""==this.GetAddress2()&&this.Options.ShowAddress2||""==this.GetCity()&&this.Options.ShowCity||""==this.GetState()&&this.Options.ShowState||""==this.GetCountry()&&this.Options.ShowCountry||""==this.GetZip()&&this.Options.ShowZip?null:{Address1:this.GetAddress1(),Address2:this.GetAddress2(),City:this.GetCity(),State:this.GetState(),Zip:this.GetZip(),Country:this.GetCountry()}:null}InitializeStartingValues(){this.Address1=this.GetPreviousDataProperty("Value,Address1",this.Options.Address1DefaultValue),this.Address2=this.GetPreviousDataProperty("Value,Address2",this.Options.Address2DefaultValue),this.City=this.GetPreviousDataProperty("Value,City",this.Options.CityDefaultValue),this.State=this.GetPreviousDataProperty("Value,State",this.Options.StateDefaultValue),this.ZipCode=this.GetPreviousDataProperty("Value,Zip",this.Options.ZipDefaultValue),this.Country=this.GetPreviousDataProperty("Value,Country",this.Options.CountryDefaultValue)}GetDynamicFieldNames(){return["FBAddress"]}SetAddress1(e){this.Address1=e,this.FireValueChanged()}SetAddress2(e){this.Address2=e,this.FireValueChanged()}SetCity(e){this.City=e,this.FireValueChanged()}SetState(e){this.State=e,this.FireValueChanged()}SetZip(e){this.ZipCode=e,this.FireValueChanged()}SetCountry(e){this.Country=e,this.FireValueChanged()}GetText(){return this.InternalToText()}GetAddress1(){return this.Address1}GetAddress2(){return this.Options.ShowAddress2?this.Address2:""}GetCity(){return this.Options.ShowCity?this.City:""}GetState(){return this.Options.ShowState?this.State:""}GetZip(){return this.Options.ShowZip?this.ZipCode:""}GetCountry(){return this.Options.ShowCountry?this.Country:""}render(){return s.html`<rn-address-field .model="${this}"></rn-address-field>`}}var y;let C=a.customElement("rn-address-field")(y=class extends l.FieldWithPrice{static get properties(){return n.FieldBase.properties}SubRender(){return s.html` <div> <div> <div style="position:relative;"> <input ${r.IconDirective(this.model.Options.Icon)} ?readOnly=${this.model.IsReadonly} @focus=${()=>{this.model.IsFocused=!0,this.model.Refresh()}} @blur=${()=>{this.model.IsFocused=!1,this.model.Refresh()}} class='rnInputPrice' placeholder=${this.model.Options.Address1Placeholder} style="width: 100%" type='text' .value=${o.live(this.model.GetAddress1())} @change=${e=>this.OnChangeAddress1(e)}/> </div> <span class="sublabel">${this.GetText(this.model.Options,"Address1Label")}</span> </div> ${d.rnIf(this.model.Options.ShowAddress2&&s.html` ${d.rnIf(this.model.Options.Address2Label&&s.html` <div style="margin-top: 16px"> <input ?readonly=${this.model.IsReadonly} @focus=${()=>{this.model.IsFocused=!0,this.model.Refresh()}} @blur=${()=>{this.model.IsFocused=!1,this.model.Refresh()}} class='rnInputPrice' placeholder=${this.model.Options.Address2Placeholder} style="width: 100%" type='text' .value=${o.live(this.model.GetAddress2())} @change=${e=>this.OnChangeAddress2(e)}/> <span class="sublabel">${this.GetText(this.model.Options,"Address2Label")}</span> </div> `)} `)} ${d.rnIf((this.model.Options.ShowCity||this.model.Options.ShowState)&&s.html` <div style="margin-top: 16px;white-space: nowrap;display: flex"> ${d.rnIf(this.model.Options.ShowCity&&s.html` <div class='rncolsm2'> <input ?readOnly=${this.model.IsReadonly} @focus=${()=>{this.model.IsFocused=!0,this.model.Refresh()}} @blur=${()=>{this.model.IsFocused=!1,this.model.Refresh()}} class='rnInputPrice' placeholder=${this.model.Options.CityPlaceholder} style="width: 100%" type='text' .value=${o.live(this.model.GetCity())} @change=${e=>this.OnChangeCity(e)}/> <span class="sublabel">${this.GetText(this.model.Options,"CityLabel")}</span> </div> `)} ${d.rnIf(this.model.Options.ShowState&&s.html` <div class='rncolsm2'> <input ?readonly=${this.model.IsReadonly} @focus=${()=>{this.model.IsFocused=!0,this.model.Refresh()}} @blur=${()=>{this.model.IsFocused=!1,this.model.Refresh()}} class='rnInputPrice' placeholder=${this.model.Options.StatePlaceholder} style="width: 100%" type='text' .value=${o.live(this.model.GetState())} @change=${e=>this.OnChangeState(e)}/> <span class="sublabel">${this.GetText(this.model.Options,"StateLabel")}</span> </div> `)} </div> `)} ${d.rnIf((this.model.Options.ShowZip||this.model.Options.ShowCountry)&&s.html` <div style="margin-top: 16px;white-space: nowrap;display: flex"> ${d.rnIf(this.model.Options.ShowZip&&s.html` <div class='rncolsm2'> <input ?readonly=${this.model.IsReadonly} @focus=${()=>{this.model.IsFocused=!0,this.model.Refresh()}} @blur=${()=>{this.model.IsFocused=!1,this.model.Refresh()}} class='rnInputPrice' placeholder=${this.model.Options.ZipPlaceholder} style="width: 100%" type='text' .value=${o.live(this.model.GetZip())} @change=${e=>this.OnChangeZip(e)}/> <span class="sublabel">${this.GetText(this.model.Options,"ZipLabel")}</span> </div> `)} ${d.rnIf(this.model.Options.ShowCountry&&s.html` <div class='rncolsm2'> <select ?disabled="${this.model.IsReadonly}" .value="${o.live(this.model.GetCountry())}" @focus=${()=>{this.model.IsFocused=!0,this.model.Refresh()}} @blur=${()=>{this.model.IsFocused=!1,this.model.Refresh()}} class='rnInputPrice' .placeholder=${this.model.Options.CountryPlaceholder} style="width: 100%" @change="${e=>this.OnChangeCountry(e.target.value)}"> <option value=""></option> ${h.repeat(this.model.CountryList,(e=>e),(e=>s.html` <option ?selected="${e==this.model.GetCountry()}" .value="${e}">${e}</option> `))} </select> <span class="sublabel">${this.GetText(this.model.Options,"CountryLabel")}</span> </div> `)} </div> `)} </div> `}OnChangeAddress1(e){this.model.SetAddress1(e.target.value)}OnChangeAddress2(e){this.model.SetAddress2(e.target.value)}OnChangeCity(e){this.model.SetCity(e.target.value)}OnChangeState(e){this.model.SetState(e.target.value)}OnChangeZip(e){this.model.SetZip(e.target.value)}OnChangeCountry(e){this.model.SetCountry(e)}})||y;var S,G,I;let g=(S=u.StoreDataType(Object),G=class extends p.FieldWithPriceOptions{constructor(...e){super(...e),babelHelpers.initializerDefineProperty(this,"Icon",I,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.Type=t.FieldTypeEnum.Address,this.Icon=(new c.IconOptions).Merge(),this.Label="Address",this.Address1Label="Address 1",this.Address2Label="Address 2",this.CityLabel="City",this.StateLabel="State",this.ZipLabel="Zip",this.CountryLabel="Country",this.SelectedCountry="Afghanistan",this.Address1Placeholder="",this.Address2Placeholder="",this.CityPlaceholder="",this.StatePlaceholder="",this.ZipPlaceholder="",this.CountryPlaceholder="",this.Address1DefaultValue="",this.Address2DefaultValue="",this.CityDefaultValue="",this.StateDefaultValue="",this.ZipDefaultValue="",this.CountryDefaultValue="",this.ShowAddress2=!0,this.ShowCity=!0,this.ShowState=!0,this.ShowZip=!0,this.ShowCountry=!0}},I=babelHelpers.applyDecoratedDescriptor(G.prototype,"Icon",[S],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),G);exports.AddressFieldModel=m,exports.AddressField=C,exports.AddressFieldOptions=g,e.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==t.FieldTypeEnum.Address)return new g})),e.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==t.FieldTypeEnum.Address)return new m(e.Options,e.Parent)}))}));
