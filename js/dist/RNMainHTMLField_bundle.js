rndefine("#RNMainHTMLField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","#RNMainCore/StoreBase","#RNMainFormBuilderCore/FieldWithPrice.Options","lit","#RNMainFormBuilderCore/FieldWithPrice.Model","#RNMainCore/Sanitizer","lit/decorators","#RNMainFormBuilderCore/FieldBase"],(function(t,e,i,s,n,o,r,l,a){"use strict";var d,h,u;let c=(d=i.StoreDataType(Object),h=class extends s.FieldWithPriceOptions{constructor(...t){super(...t),babelHelpers.initializerDefineProperty(this,"HTML",u,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.Type=e.FieldTypeEnum.HTML,this.Label="HTML",this.HTML=null,this.TextPosition="Bottom"}},u=babelHelpers.applyDecoratedDescriptor(h.prototype,"HTML",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),h);class m extends o.FieldWithPriceModel{constructor(t,e){super(t,e),this.HTML=null}InternalSerialize(t){t.Value=this.GetValue()}GetValue(){var t,e;return this.GetIsVisible()?{Text:null===(t=this.HTML)||void 0===t?void 0:t.outerText,HTML:null===(e=this.HTML)||void 0===e?void 0:e.outerHTML}:""}GetAdditionalClasses(){let t=super.GetAdditionalClasses();return t.push("rn"+this.Options.TextPosition),t}render(){return n.html`<rn-html-field .model="${this}"></rn-html-field>`}InitializeStartingValues(t){let e=new DOMParser;try{let t=[];if(null==this.Options.HTML)return void(this.HTML=null);this.HTML=e.parseFromString(this.Options.HTML,"text/html").body,this.HTML.querySelectorAll('div[data-type="field"]').forEach(((e,i)=>{let s=e.getAttribute("data-field-id"),n=this.FormBuilder.GetFieldById(s,!1,!0);t.indexOf(n)<0&&(t.push(n),e.innerHTML=this.GetFieldValue(n),n.ValueChanged.Subscribe(this,(t=>{e.innerHTML=this.GetFieldValue(n),this.Refresh()})))})),this.HTML.querySelectorAll('div[data-type="fixed"]').forEach(((t,e)=>{let i=t.getAttribute("value"),s=t.getAttribute("data-options");if(""!=s)try{s=JSON.parse(atob(s))}catch(t){s=null}else s=null;t.textContent=this.GetFixedHtmlValue(i,s),this.Refresh()}))}catch(t){}}GetFixedHtmlValue(t,e){let i=r.Sanitizer.GetValueFromPath(e,["Id"]);return r.Sanitizer.GetValueFromPath(this.RootFormBuilder,["AdditionalOptions","Attributes",t+(""==i?"":"_"+i)])}GetFieldValue(t){let e=document.createElement("div");e.style.display="inline-block";let i=t.GetHtml();return"string"==typeof i?e.innerText=i:e.innerHTML=n.renderInline(i,!0).innerHTML,e.innerHTML}}var p,v,_;const $=globalThis,g=t=>{$.emitLitDebugLogEvents&&$.dispatchEvent(new CustomEvent("lit-debug",{detail:t}))};let f;var y;null!==(y=$.litIssuedWarnings)&&void 0!==y||($.litIssuedWarnings=new Set),f=(t,e)=>{e+=t?` See https://lit.dev/msg/${t} for more information.`:"",$.litIssuedWarnings.has(e)||(console.warn(e),$.litIssuedWarnings.add(e))},f("dev-mode","Lit is in dev mode. Not recommended for production!");const b=(null===(p=$.ShadyDOM)||void 0===p?void 0:p.inUse)&&!0===(null===(v=$.ShadyDOM)||void 0===v?void 0:v.noPatch)?$.ShadyDOM.wrap:t=>t,x=$.trustedTypes,T=x?x.createPolicy("lit-html",{createHTML:t=>t}):void 0,w=t=>t,M=(t,e,i)=>w,N=(t,e,i)=>U(),V="$lit$",L=`lit$${String(Math.random()).slice(9)}$`,C="?"+L,S=`<${C}>`,H=document,E=()=>H.createComment(""),F=t=>null===t||"object"!=typeof t&&"function"!=typeof t,k=Array.isArray,A="[ \t\n\f\r]",z=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,I=/-->/g,O=/>/g,R=new RegExp(`>|${A}(?:([^\\s"'>=/]+)(${A}*=${A}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),D=/'/g,P=/"/g,B=/^(?:script|style|textarea|title)$/i,G=Symbol.for("lit-noChange"),W=Symbol.for("lit-nothing"),j=new WeakMap,q=H.createTreeWalker(H,129);let U=M;function Y(t,e){if(!Array.isArray(t)||!t.hasOwnProperty("raw")){let t="invalid template strings array";throw t=" Internal Error: expected template strings to be an array with a 'raw' field. Faking a template strings array by calling html or svg like an ordinary function is effectively the same as calling unsafeHtml and can lead to major security issues, e.g. opening your code up to XSS attacks. If you're using the html or svg tagged template functions normally and still seeing this error, please file a bug at https://github.com/lit/lit/issues/new?template=bug_report.md and include information about your build tooling, if any. ".trim().replace(/\n */g,"\n"),new Error(t)}return void 0!==T?T.createHTML(e):e}class Z{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let n=0,o=0;const r=t.length-1,l=this.parts,[a,d]=((t,e)=>{const i=t.length-1,s=[];let n,o=2===e?"<svg>":"",r=z;for(let e=0;e<i;e++){const i=t[e];let a,d,h=-1,u=0;for(;u<i.length&&(r.lastIndex=u,d=r.exec(i),null!==d);)if(u=r.lastIndex,r===z){if("!--"===d[1])r=I;else if(void 0!==d[1])r=O;else if(void 0!==d[2])B.test(d[2])&&(n=new RegExp(`</${d[2]}`,"g")),r=R;else if(void 0!==d[3])throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions")}else if(r===R){var l;">"===d[0]?(r=null!==(l=n)&&void 0!==l?l:z,h=-1):void 0===d[1]?h=-2:(h=r.lastIndex-d[2].length,a=d[1],r=void 0===d[3]?R:'"'===d[3]?P:D)}else r===P||r===D?r=R:r===I||r===O?r=z:(r=R,n=void 0);console.assert(-1===h||r===R||r===D||r===P,"unexpected parse state B");const c=r===R&&t[e+1].startsWith("/>")?" ":"";o+=r===z?i+S:h>=0?(s.push(a),i.slice(0,h)+V+i.slice(h)+L+c):i+L+(-2===h?e:c)}return[Y(t,o+(t[i]||"<?>")+(2===e?"</svg>":"")),s]})(t,e);if(this.el=Z.createElement(a,i),q.currentNode=this.el.content,2===e){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(s=q.nextNode())&&l.length<r;){if(1===s.nodeType){{const t=s.localName;if(/^(?:textarea|template)$/i.test(t)&&s.innerHTML.includes(L)){const e=`Expressions are not supported inside \`${t}\` elements. See https://lit.dev/msg/expression-in-${t} for more information.`;if("template"===t)throw new Error(e);f("",e)}}if(s.hasAttributes())for(const t of s.getAttributeNames())if(t.endsWith(V)){const e=d[o++],i=s.getAttribute(t).split(L),r=/([.?@])?(.*)/.exec(e);l.push({type:1,index:n,name:r[2],strings:i,ctor:"."===r[1]?tt:"?"===r[1]?et:"@"===r[1]?it:Q}),s.removeAttribute(t)}else t.startsWith(L)&&(l.push({type:6,index:n}),s.removeAttribute(t));if(B.test(s.tagName)){const t=s.textContent.split(L),e=t.length-1;if(e>0){s.textContent=x?x.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],E()),q.nextNode(),l.push({type:2,index:++n});s.append(t[e],E())}}}else if(8===s.nodeType){if(s.data===C)l.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf(L,t+1));)l.push({type:7,index:n}),t+=L.length-1}}n++}if(d.length!==o)throw new Error('Detected duplicate attribute bindings. This occurs if your template has duplicate attributes on an element tag. For example "<input ?disabled=${true} ?disabled=${false}>" contains a duplicate "disabled" attribute. The error was detected in the following template: \n`'+t.join("${...}")+"`");g&&g({kind:"template prep",template:this,clonableTemplate:this.el,parts:this.parts,strings:t})}static createElement(t,e){const i=H.createElement("template");return i.innerHTML=t,i}}function J(t,e,i=t,s){var n,o;if(e===G)return e;let r=void 0!==s?null===(n=i.__directives)||void 0===n?void 0:n[s]:i.__directive;const l=F(e)?void 0:e._$litDirective$;var a,d,h;(null===(o=r)||void 0===o?void 0:o.constructor)!==l&&(null===(a=r)||void 0===a||null===(d=a._$notifyDirectiveConnectionChanged)||void 0===d||d.call(a,!1),void 0===l?r=void 0:(r=new l(t),r._$initialize(t,i,s)),void 0!==s?(null!==(h=i.__directives)&&void 0!==h?h:i.__directives=[])[s]=r:i.__directive=r);return void 0!==r&&(e=J(t,r._$resolve(t,e.values),r,s)),e}class X{constructor(t,e){this._$parts=[],this._$disconnectableChildren=void 0,this._$template=t,this._$parent=e}get parentNode(){return this._$parent.parentNode}get _$isConnected(){return this._$parent._$isConnected}_clone(t){var e;const{el:{content:i},parts:s}=this._$template,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:H).importNode(i,!0);q.currentNode=n;let o=q.nextNode(),r=0,l=0,a=s[0];for(;void 0!==a;){var d;if(r===a.index){let e;2===a.type?e=new K(o,o.nextSibling,this,t):1===a.type?e=new a.ctor(o,a.name,a.strings,this,t):6===a.type&&(e=new st(o,this,t)),this._$parts.push(e),a=s[++l]}r!==(null===(d=a)||void 0===d?void 0:d.index)&&(o=q.nextNode(),r++)}return q.currentNode=H,n}_update(t){let e=0;for(const i of this._$parts)void 0!==i&&(g&&g({kind:"set part",part:i,value:t[e],valueIndex:e,values:t,templateInstance:this}),void 0!==i.strings?(i._$setValue(t,i,e),e+=i.strings.length-2):i._$setValue(t[e])),e++}}class K{get _$isConnected(){var t,e;return null!==(t=null===(e=this._$parent)||void 0===e?void 0:e._$isConnected)&&void 0!==t?t:this.__isConnected}constructor(t,e,i,s){var n;this.type=2,this._$committedValue=W,this._$disconnectableChildren=void 0,this._$startNode=t,this._$endNode=e,this._$parent=i,this.options=s,this.__isConnected=null===(n=null==s?void 0:s.isConnected)||void 0===n||n,this._textSanitizer=void 0}get parentNode(){var t;let e=b(this._$startNode).parentNode;const i=this._$parent;return void 0!==i&&11===(null===(t=e)||void 0===t?void 0:t.nodeType)&&(e=i.parentNode),e}get startNode(){return this._$startNode}get endNode(){return this._$endNode}_$setValue(t,e=this){if(null===this.parentNode)throw new Error("This `ChildPart` has no `parentNode` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's `innerHTML` or `textContent` can do this.");if(t=J(this,t,e),F(t))t===W||null==t||""===t?(this._$committedValue!==W&&(g&&g({kind:"commit nothing to child",start:this._$startNode,end:this._$endNode,parent:this._$parent,options:this.options}),this._$clear()),this._$committedValue=W):t!==this._$committedValue&&t!==G&&this._commitText(t);else if(void 0!==t._$litType$)this._commitTemplateResult(t);else if(void 0!==t.nodeType){var i;if((null===(i=this.options)||void 0===i?void 0:i.host)===t)return this._commitText("[probable mistake: rendered a template's host in itself (commonly caused by writing ${this} in a template]"),void console.warn("Attempted to render the template host",t,"inside itself. This is almost always a mistake, and in dev mode ","we render some warning text. In production however, we'll ","render it, which will usually result in an error, and sometimes ","in the element disappearing from the DOM.");this._commitNode(t)}else(t=>k(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this._commitIterable(t):this._commitText(t)}_insert(t){return b(b(this._$startNode).parentNode).insertBefore(t,this._$endNode)}_commitNode(t){if(this._$committedValue!==t){if(this._$clear(),U!==M){var e;const t=null===(e=this._$startNode.parentNode)||void 0===e?void 0:e.nodeName;if("STYLE"===t||"SCRIPT"===t){let e="Forbidden";throw e="STYLE"===t?"Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css`...` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.":"Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.",new Error(e)}}g&&g({kind:"commit node",start:this._$startNode,parent:this._$parent,value:t,options:this.options}),this._$committedValue=this._insert(t)}}_commitText(t){if(this._$committedValue!==W&&F(this._$committedValue)){const e=b(this._$startNode).nextSibling;void 0===this._textSanitizer&&(this._textSanitizer=N()),t=this._textSanitizer(t),g&&g({kind:"commit text",node:e,value:t,options:this.options}),e.data=t}else{const e=H.createTextNode("");this._commitNode(e),void 0===this._textSanitizer&&(this._textSanitizer=N()),t=this._textSanitizer(t),g&&g({kind:"commit text",node:e,value:t,options:this.options}),e.data=t}this._$committedValue=t}_commitTemplateResult(t){var e;const{values:i,_$litType$:s}=t,n="number"==typeof s?this._$getTemplate(t):(void 0===s.el&&(s.el=Z.createElement(Y(s.h,s.h[0]),this.options)),s);if((null===(e=this._$committedValue)||void 0===e?void 0:e._$template)===n)g&&g({kind:"template updating",template:n,instance:this._$committedValue,parts:this._$committedValue._$parts,options:this.options,values:i}),this._$committedValue._update(i);else{const t=new X(n,this),e=t._clone(this.options);g&&g({kind:"template instantiated",template:n,instance:t,parts:t._$parts,options:this.options,fragment:e,values:i}),t._update(i),g&&g({kind:"template instantiated and updated",template:n,instance:t,parts:t._$parts,options:this.options,fragment:e,values:i}),this._commitNode(e),this._$committedValue=t}}_$getTemplate(t){let e=j.get(t.strings);return void 0===e&&j.set(t.strings,e=new Z(t)),e}_commitIterable(t){k(this._$committedValue)||(this._$committedValue=[],this._$clear());const e=this._$committedValue;let i,s=0;for(const n of t)s===e.length?e.push(i=new K(this._insert(E()),this._insert(E()),this,this.options)):i=e[s],i._$setValue(n),s++;s<e.length&&(this._$clear(i&&b(i._$endNode).nextSibling,s),e.length=s)}_$clear(t=b(this._$startNode).nextSibling,e){var i;for(null===(i=this._$notifyConnectionChanged)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$endNode;){const e=b(t).nextSibling;b(t).remove(),t=e}}setConnected(t){if(void 0!==this._$parent)throw new Error("part.setConnected() may only be called on a RootPart returned from render().");var e;this.__isConnected=t,null===(e=this._$notifyConnectionChanged)||void 0===e||e.call(this,t)}}class Q{get tagName(){return this.element.tagName}get _$isConnected(){return this._$parent._$isConnected}constructor(t,e,i,s,n){this.type=1,this._$committedValue=W,this._$disconnectableChildren=void 0,this.element=t,this.name=e,this._$parent=s,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$committedValue=new Array(i.length-1).fill(new String),this.strings=i):this._$committedValue=W,this._sanitizer=void 0}_$setValue(t,e=this,i,s){const n=this.strings;let o=!1;if(void 0===n)t=J(this,t,e,0),o=!F(t)||t!==this._$committedValue&&t!==G,o&&(this._$committedValue=t);else{const s=t;let l,a;for(t=n[0],l=0;l<n.length-1;l++){if(a=J(this,s[i+l],e,l),a===G&&(a=this._$committedValue[l]),o||(o=!F(a)||a!==this._$committedValue[l]),a===W)t=W;else if(t!==W){var r;t+=(null!==(r=a)&&void 0!==r?r:"")+n[l+1]}this._$committedValue[l]=a}}o&&!s&&this._commitValue(t)}_commitValue(t){var e,i;t===W?b(this.element).removeAttribute(this.name):(void 0===this._sanitizer&&(this._sanitizer=U(this.element,this.name)),t=this._sanitizer(null!==(i=t)&&void 0!==i?i:""),g&&g({kind:"commit attribute",element:this.element,name:this.name,value:t,options:this.options}),b(this.element).setAttribute(this.name,null!==(e=t)&&void 0!==e?e:""))}}class tt extends Q{constructor(){super(...arguments),this.type=3}_commitValue(t){void 0===this._sanitizer&&(this._sanitizer=U(this.element,this.name)),t=this._sanitizer(t),g&&g({kind:"commit property",element:this.element,name:this.name,value:t,options:this.options}),this.element[this.name]=t===W?void 0:t}}class et extends Q{constructor(){super(...arguments),this.type=4}_commitValue(t){g&&g({kind:"commit boolean attribute",element:this.element,name:this.name,value:!(!t||t===W),options:this.options}),b(this.element).toggleAttribute(this.name,!!t&&t!==W)}}class it extends Q{constructor(t,e,i,s,n){if(super(t,e,i,s,n),this.type=5,void 0!==this.strings)throw new Error(`A \`<${t.localName}>\` has a \`@${e}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`)}_$setValue(t,e=this){var i;if((t=null!==(i=J(this,t,e,0))&&void 0!==i?i:W)===G)return;const s=this._$committedValue,n=t===W&&s!==W||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==W&&(s===W||n);g&&g({kind:"commit event listener",element:this.element,name:this.name,value:t,options:this.options,removeListener:n,addListener:o,oldListener:s}),n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$committedValue=t}handleEvent(t){var e,i;"function"==typeof this._$committedValue?this._$committedValue.call(null!==(e=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==e?e:this.element,t):this._$committedValue.handleEvent(t)}}class st{constructor(t,e,i){this.element=t,this.type=6,this._$disconnectableChildren=void 0,this._$parent=e,this.options=i}get _$isConnected(){return this._$parent._$isConnected}_$setValue(t){g&&g({kind:"commit to element binding",element:this.element,value:t,options:this.options}),J(this,t)}}const nt=$.litHtmlPolyfillSupportDevMode;null==nt||nt(Z,K),(null!==(_=$.litHtmlVersions)&&void 0!==_?_:$.litHtmlVersions=[]).push("3.1.2"),$.litHtmlVersions.length>1&&f("multiple-versions","Multiple versions of Lit loaded. Loading multiple versions is not recommended.");const ot=2;class rt{constructor(t){}get _$isConnected(){return this._$parent._$isConnected}_$initialize(t,e,i){this.__part=t,this._$parent=e,this.__attributeIndex=i}_$resolve(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}class lt extends rt{constructor(t){if(super(t),this._value=W,t.type!==ot)throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`)}render(t){if(t===W||null==t)return this._templateResult=void 0,this._value=t;if(t===G)return t;if("string"!=typeof t)throw new Error(`${this.constructor.directiveName}() called with a non-string value`);if(t===this._value)return this._templateResult;this._value=t;const e=[t];return e.raw=e,this._templateResult={_$litType$:this.constructor.resultType,strings:e,values:[]}}}lt.directiveName="unsafeHTML",lt.resultType=1;const at=(dt=lt,(...t)=>({_$litDirective$:dt,values:t}));var dt,ht;let ut=l.customElement("rn-html-field")(ht=class extends a.FieldBase{static get properties(){return a.FieldBase.properties}SubRender(){var t,e;return n.html` <div style="position: relative;flex-grow: 1"> ${at(null!==(t=null===(e=this.model.HTML)||void 0===e?void 0:e.innerHTML)&&void 0!==t?t:"")} </div> `}})||ht;exports.HTMLField=ut,exports.HTMLFieldModel=m,exports.HTMLFieldOptions=c,t.EventManager.Subscribe("GetFieldOptions",(t=>{if(t==e.FieldTypeEnum.HTML)return new c})),t.EventManager.Subscribe("GetFieldModel",(t=>{if(t.Options.Type==e.FieldTypeEnum.HTML)return new m(t.Options,t.Parent)}))}));
