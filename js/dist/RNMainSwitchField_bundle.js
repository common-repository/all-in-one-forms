rndefine("#RNMainSwitchField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","lit/decorators","lit","#RNMainFormBuilderCore/FieldBase","#RNMainFormBuilderCore/FieldWithPrice","#RNMainLit/Lit","#RNMainFormBuilderCore/FieldWithPrice.Model","#RNMainCore/Sanitizer","#RNMainFormBuilderCore/FieldWithPrice.Options","#RNMainFormBuilderCore/RunnableComparatorBase","#RNMainFormBuilderCore/ConditionBase.Options"],(function(e,t,i,s,n,r,a,l,o,h,d,c){"use strict";var u;let p=i.customElement("rn-switch-field")(u=class extends r.FieldWithPrice{static get properties(){return n.FieldBase.properties}SubRender(){return s.html` <div style="position: relative;"> <label class="toggle-switchy" data-style="${this.model.Options.Style}"> <input .checked="${this.model.Checked}" @change="${e=>this.model.SetChecked(e.target.checked)}" type="checkbox"> <span class="toggle"> ${a.rnIf(this.model.Checked&&s.html` <span style="position:absolute;width: 70%;height: 100%;display: flex;align-items: center;justify-content: center;">${this.model.Options.CheckedText}</span> `)} <span class="switch"></span> ${a.rnIf(!this.model.Checked&&s.html` <span style="position:absolute;width: 70%;height: 100%;display: flex;align-items: center;justify-content: center;right: 0;">${this.model.Options.UnCheckedText}</span> `)} </span> </label> </div> `}OnChange(e){}})||u;class C extends l.FieldWithPriceModel{constructor(e,t){super(e,t)}InternalSerialize(e){super.InternalSerialize(e),e.Value=this.GetValue()}SetChecked(e){this.Checked=o.Sanitizer.SanitizeBoolean(e),this.FireValueChanged()}GetStoresInformation(){return!0}GetIsUsed(){return!!super.GetIsUsed()&&this.Checked}GetText(){return this.Checked?this.Options.CheckedText:this.Options.UnCheckedText}GetValue(){return!!this.GetIsVisible()&&this.Checked}InitializeStartingValues(){this.Checked=this.GetPreviousDataProperty("Value",this.Options.Checked)}render(){return s.html`<rn-switch-field .model="${this}"></rn-switch-field>`}}class m extends h.FieldWithPriceOptions{LoadDefaultValues(){super.LoadDefaultValues(),this.Type=t.FieldTypeEnum.Switch,this.Label="Switch",this.Style="rounded",this.CheckColor="#080",this.UnCheckColor="#888",this.Checked=!1,this.CheckedText="Yes",this.UnCheckedText="No",this.PriceType=h.PriceTypeEnum.none}}class k extends d.RunnableComparatorBase{InternalCompare(e,t){let i=this.GetValue(e,t);switch(e.Comparison){case c.ComparisonTypeEnum.IsChecked:return 1==i;case c.ComparisonTypeEnum.IsNotChecked:return 0==i}}}e.EventManager.Subscribe("GetRunnableComparator",(e=>{if("Checkbox"==e.SubType)return new k(e.Container)})),exports.SwitchField=p,exports.SwitchFieldModel=C,exports.SwitchFieldOptions=m,e.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==t.FieldTypeEnum.Switch)return new m})),e.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==t.FieldTypeEnum.Switch)return new C(e.Options,e.Parent)}))}));
