rndefine("#RNMainFileUploader",["exports","#RNMainCore/LitElementBase","lit/decorators","lit","#RNMainCoreUI/ToastService"],(function(e,t,i,r,a){"use strict";var s,l,n,p,o;let d=(s=i.customElement("rn-file-uploader"),l=i.query("input"),s((p=class extends t.LitElementBase{constructor(...e){super(...e),this.IsDragging=!1,this.placeholder="Drop files to upload or ",this.buttonLabel="Select a file",this.accept="image/*",this.invalidMessage="Invalid file type",babelHelpers.initializerDefineProperty(this,"input",o,this)}static get properties(){return{placeholder:{type:String,attribute:!0},buttonLabel:{type:String,attribute:!0},accept:{type:String,attribute:!0},IsDragging:{type:Boolean},invalidMessage:{type:String,attribute:!0}}}render(){return null!=this.FileUploaded?r.html`<div class="uploaderContainer" style="display: flex;flex-wrap: wrap;border-style: solid" > ${this.FileUploaded.name} </div>`:r.html`<div class="uploaderContainer ${this.IsDragging?"dragging":""}" style="display: flex;flex-wrap: wrap" @dragenter="${e=>this.DragEnter(e)}" @drop="${e=>this.Drop(e)}" @dragover="${e=>this.DragOver(e)}" @dragleave="${e=>this.DragLeave(e)}"> <span style="margin-right: 3px">${this.placeholder}</span> <input type="file" @change="${e=>this.OnChange(e)}" accept="${this.accept}" style="display: none"> <button @click="${e=>{e.preventDefault(),this.ButtonClick()}}">${this.buttonLabel}</button> </div>`}ButtonClick(){this.input.click()}DragEnter(e){e.currentTarget.contains(e.relatedTarget)||(this.IsDragging=!0)}DragLeave(e){e.currentTarget.contains(e.relatedTarget)||(this.IsDragging=!1)}Drop(e){e.preventDefault(),e.stopPropagation(),this.IsDragging=!1,this.ProcessFile(e.dataTransfer.files.item(0))}ProcessFile(e){if(!this.IsAccepted(e))return a.ToastService.SendErrorMessage(this.invalidMessage),this.input.value="",void(this.FileUploaded=null);this.FireEvent("fileuploaded",e).defaultPrevented?(this.FileUploaded=null,this.input.value=""):this.FileUploaded=e,this.forceUpdate()}DragOver(e){e.preventDefault()}IsAccepted(e){let t=this.accept.split(",").map((e=>e.trim()));for(let i of t){if(e.type==i)return!0;if(i.endsWith("/*")&&e.type.startsWith(i.substr(0,i.length-1)))return!0;if(i.startsWith("*.")&&e.name.endsWith(i.substr(1)))return!0}return!1}OnChange(e){0!=this.input.files.length?this.ProcessFile(this.input.files.item(0)):this.FileUploaded=null}},o=babelHelpers.applyDecoratedDescriptor(p.prototype,"input",[l],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),n=p))||n);e.FileUploader=d,Object.defineProperty(e,"__esModule",{value:!0})}));
