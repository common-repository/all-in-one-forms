rndefine("#RNMainTextField",["lit","#RNMainFormBuilderCore/FieldWithPrice.Model","#RNMainCore/Sanitizer","#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","#RNMainCore/StoreBase","#RNMainFormBuilderCore/FieldWithPrice.Options","#RNMainFormBuilderCore/FormBuilder.Options","lit/decorators","#RNMainFormBuilderCore/FieldBase","#RNMainFormBuilderCore/IconDirective","#RNMainFormBuilderCore/FieldWithPrice","lit-html/directives/live.js"],(function(e,t,i,r,s,l,n,o,a,d,u,h,p){"use strict";class c extends t.FieldWithPriceModel{constructor(e,t){super(e,t),this._text=""}InternalSerialize(e){super.InternalSerialize(e),e.Value=this.GetValue()}get IsReadonly(){return!!this.Options.ReadOnly||super.IsReadonly}GetValue(){return this.GetIsVisible()?this._text:""}GetIsUsed(){return!!super.GetIsUsed()&&""!=this._text.trim()}render(){return e.html`<rn-text-field .model="${this}"></rn-text-field>`}SetText(e){return this._text=i.Sanitizer.SanitizeString(e),this.FireValueChanged()}GetText(){return this.GetIsVisible()?this._text:""}InitializeStartingValues(e){this._text=this.GetPreviousDataProperty("Value",this.Options.DefaultText),this.FireValueChanged()}}var F,x,m;let I=(F=l.StoreDataType(Object),x=class extends n.FieldWithPriceOptions{constructor(...e){super(...e),this.FreeCharOrWords=0,babelHelpers.initializerDefineProperty(this,"Icon",m,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.ReadOnly=!1,this.Type=s.FieldTypeEnum.Text,this.Label="Text box",this.IgnoreSpaces=!1,this.Icon=(new o.IconOptions).Merge(),this.Placeholder="",this.DefaultText="",this.FreeCharOrWords=0}},m=babelHelpers.applyDecoratedDescriptor(x.prototype,"Icon",[F],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),x);var O;let T=a.customElement("rn-text-field")(O=class extends h.FieldWithPrice{static get properties(){return d.FieldBase.properties}SubRender(){return e.html` <div style="position: relative;"> <input ${u.IconDirective(this.model.Options.Icon)} ?readOnly=${this.model.IsReadonly} @focus=${()=>{this.model.IsFocused=!0,this.model.Refresh()}} @blur=${()=>{this.model.IsFocused=!1,this.model.Refresh()}} class='rnInputPrice' placeholder=${this.model.Options.Placeholder} style="width: 100%;" type='text' .value=${p.live(this.model.GetText())} @input=${e=>this.OnChange(e)}/> </div> `}OnChange(e){this.model.SetText(e.target.value)}})||O;exports.TextFieldModel=c,exports.TextField=T,exports.TextFieldOptions=I,r.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==s.FieldTypeEnum.Text)return new I})),r.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==s.FieldTypeEnum.Text)return new c(e.Options,e.Parent)}))}));
